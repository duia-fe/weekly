# 网站性能优化

### 代码方面的性能优化

1. 减少对闭包的使用（因为过多使用闭包会产生很多不销毁的内存，处理不好的话，会导致内存溢出“栈溢出”），减少闭包的嵌套（减少作用域链的查找层级）
2. 对于动画来说：能用 CSS 解决的不用 JS（能够用 transform 处理的，不用传统的 css 样式，因为 transform 开启硬件加速，不会引发回流，再或者使用定位的元素也会好很多，因为定位的元素脱离文档流，不会对其它元素的位置造成影响），能用 requestAnimationFrame (https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)解决的不用定时器 + requestAnimationFrame 还有一个好处，当页面处于休眠无访问状态，动画会自己暂停，直到恢复访问才开始，而定时器是不论什么状态，只要页面不管，就一直处理）
3. 避免使用 iframe（因为 iframe 会嵌入其它页面，这样父页面渲染的时候，还要同时把子页面也渲染了，渲染进度会变慢）
4. 减少直接对 DOM 的操作（原因是减少 DOM 的回流和重绘...），当代项目基本上都是基于 mvvm/mvc 数据驱动视图渲染的，对 DOM 的操作框架本身完成，性能要好很多
5. 低耦合高内聚（基于封装的方式：方法封装、插件、组件、框架、类库等封装，减少页面中的冗余代码，提高代码使用率）
6. 尽可能使用事件委托
7. 避免出现死循环或者嵌套循环（嵌套循环会成倍增加循环的次数）
8. 项目中尽可能使用异步编程来模拟出多线程的效果，避免主线程阻塞（异步操作基于 PROMISE 设计模式来管理）
9. JS 中不要使用 with
10. 避免使用 CSS 表达式
11. 函数的防抖和节流
12. 减少使用 eval (https://www.w3school.com.cn/js/jsref_eval.asp)（主要原因是防止压缩代码的时候，由于符号书写不合规，导致代码混乱）
13. 减少 filter 滤镜的使用
14. 尽可能减少选择器的层级（选择器是从右向左解析） .box a{} 和 a{}
15. 尽可能减少 TABLE 布局 （因为 table 中某个元素旦触发了 reflow，那么整个 table 的元素都会触发 reflow。那么在不得已使用 table 的场合，可以设置 table-layout:auto;或者是 table-layout:fixed 这样可以让 table 一行一行的渲染，这种做法也是为了限制 reflow 的影响范围）
16. 手动回收堆栈内存（赋值为 null）

### 缓存 （强制缓存 ， 对比缓存）

### 缓存数据库=====浏览器

[图片 1](第一次请求数据.png)
[图片 2](强制缓存1.png)
[图片 3](强制缓存2.png)
[图片 4](对比缓存1.png)
[图片 5](对比缓存2.png)

-   强制缓存如果生效，不需要再和服务器发生交互
-   而对比缓存不管是否生效，都需要与服务端发生交互

### 压缩、合并

1. js、css 压缩合并 （gulp，webpack， grunt） Tips：在 压缩、合并 后，单个文件控制在 25 ~ 30 KB 左右，同一个域下，最好不要多于 5 个资源
2. 图片压缩合并
